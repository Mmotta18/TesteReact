{"version":3,"sources":["HelloStateless.js","HelloStateful.js","HelloForm.js","App.js","Home.js","List.js","serviceWorker.js","index.js"],"names":["HelloStateless","props","react_default","a","createElement","style","fontWeight","fontSize","backgroundColor","nome","HelloStateful","state","clicou","console","log","this","setState","onClick","handleClick","bind","React","Component","HelloForm","texto","e","target","value","exibeAlerta","type","onChange","handleTextChange","App","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAYeA,MAVf,SAAwBC,GACpB,OACIC,EAAAC,EAAAC,cAAA,OACIC,MAAO,CAAEC,WAAY,OAAQC,SAAU,OAAQC,gBAAiB,YADpE,WAGUP,EAAMQ,OCqBTC,6MAzBXC,MAAQ,CACJC,OAAQ,0GAIRC,QAAQC,IAAI,0EAIZC,KAAKC,SAAS,CACVJ,OAAQ,4CAKZ,OACIV,EAAAC,EAAAC,cAAA,sBACUW,KAAKd,MAAMQ,KADrB,YACiCM,KAAKJ,MAAMC,OAD5C,IAGIV,EAAAC,EAAAC,cAAA,UAAQa,QAASF,KAAKG,YAAYC,KAAKJ,OAAvC,uBApBYK,IAAMC,WC0BnBC,6MAzBXX,MAAQ,CACJY,MAAO,oFAGMC,GACbT,KAAKC,SAAS,CACVO,MAAOC,EAAEC,OAAOC,8CAKpBX,KAAKd,MAAM0B,YAAYZ,KAAKJ,MAAMY,wCAIlC,OACIrB,EAAAC,EAAAC,cAAA,8BACoBF,EAAAC,EAAAC,cAAA,SAAOwB,KAAK,OAAOC,SAAUd,KAAKe,iBAAiBX,KAAKJ,QACxEb,EAAAC,EAAAC,cAAA,WAAMW,KAAKJ,MAAMY,OACjBrB,EAAAC,EAAAC,cAAA,UAAQa,QAASF,KAAKG,YAAYC,KAAKJ,OAAvC,yBApBQK,IAAMC,WCiBfU,GCdIX,IAAMC,UCHND,IAAMC,2LFQjB,OACInB,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,OACZ9B,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,+BALGgB,IAAMC,YGIJY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.94f4c412.chunk.js","sourcesContent":["import React from 'react';\n\nfunction HelloStateless(props) {\n    return (\n        <div\n            style={{ fontWeight: 'bold', fontSize: '18px', backgroundColor: '#ff0000' }}\n        >\n            Olá, {props.nome}\n        </div>\n    )\n}\n\nexport default HelloStateless;\n","import React from 'react'; \n\nclass HelloStateful extends React.Component {\n    state = {\n        clicou: 'ainda não clicou'\n    }\n\n    componentDidMount() {\n        console.log('[HelloStateful] Apareceu na tela');\n    }\n\n    handleClick() {\n        this.setState({\n            clicou: 'clicou'\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                Olá, {this.props.nome} você {this.state.clicou}.\n\n                <button onClick={this.handleClick.bind(this)}>Clique aqui</button>\n            </div>\n        );\n    }\n}\n\nexport default HelloStateful;\n","import React from 'react';\n\nclass HelloForm extends React.Component {\n    state = {\n        texto: ''\n    };\n\n    handleTextChange(e) {\n        this.setState({\n            texto: e.target.value\n        });\n    }\n\n    handleClick() {\n        this.props.exibeAlerta(this.state.texto);\n    }\n\n    render() {\n        return (\n            <div>\n                Digite o texto: <input type=\"text\" onChange={this.handleTextChange.bind(this)}></input>\n                <div>{this.state.texto}</div>\n                <button onClick={this.handleClick.bind(this)}>Exibir alerta</button>\n            </div>\n        )\n    }\n}\n\nexport default HelloForm;\n","import React from 'react';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\n\nimport './App.css';\n\nimport Home from './Home';\nimport List from './List';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"App\">\n               <h1>Teste do React</h1>   \n               <h2>git pages</h2>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport HelloStateless from './HelloStateless';\nimport HelloStateful from './HelloStateful';\nimport HelloForm from './HelloForm';\n\nclass Home extends React.Component {\n    exibirAlerta(texto) {\n        alert('[Home.js] ' + texto)\n    }\n\n    render() {\n        return (\n            <div>\n                <HelloStateless nome=\"seu nome\"></HelloStateless>\n                <HelloStateful nome=\"seu nome\"></HelloStateful>\n                <HelloStateful nome=\"outro nome\"></HelloStateful>\n                <HelloForm exibeAlerta={this.exibirAlerta}></HelloForm>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import React from 'react';\n\nclass List extends React.Component {\n    state = {\n        linguagens: []\n    };\n\n    componentDidMount() {\n        fetch('http://alefesouza.dev/api/languages.php')\n            .then(res => res.json())\n            .then(res => {\n                this.setState({\n                    linguagens: res\n                });\n            });\n    }\n\n    render() {\n        let content = <p>Carregando...</p>\n\n        if (this.state.linguagens.length !== 0) {\n            content = (<ul>\n                {this.state.linguagens.map(item => (\n                    <li key={item.id}>\n                        <p><b>Nome:</b> {item.name}</p>\n                        <p><b>Criador:</b> {item.creator}</p>\n                        <p><b>Ano de criação:</b> {item.year}</p>\n                    </li>\n                ))}\n            </ul>)\n        }\n\n        return (\n            <div>\n                <h1>Lista de linguagens</h1>\n\n                {content}\n            </div>\n        );\n    }\n}\n\nexport default List;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}